# =============================================================================
# Time Logger Bot - Multi-Tenant Configuration Template
# =============================================================================
# Copy this file to .env and fill in your actual values
# Command: cp env.example .env

# =============================================================================
# SLACK CONFIGURATION
# =============================================================================
# Get these from your Slack app at https://api.slack.com/apps
# Use the slack-app-manifest.yml to create your app

# Bot User OAuth Token (starts with xoxb-)
# From: OAuth & Permissions > Bot User OAuth Token
SLACK_BOT_TOKEN=xoxb-your-bot-token

# App Signing Secret 
# From: Basic Information > App Credentials > Signing Secret
SLACK_SIGNING_SECRET=your-signing-secret

# App-Level Token for Socket Mode (starts with xapp-)
# From: Basic Information > App-Level Tokens (create with connections:write scope)
SLACK_APP_TOKEN=xapp-your-app-token

# =============================================================================
# MICROSOFT TEAMS CONFIGURATION
# =============================================================================
# Get these from Azure Portal > App Registrations
# Follow TEAMS_SETUP.md for detailed instructions

# Teams App ID (Azure App Registration ID)
TEAMS_APP_ID=your-teams-app-id

# Teams App Password (Azure App Registration Secret)
TEAMS_APP_PASSWORD=your-teams-app-password

# Teams Tenant ID (optional, for single tenant apps)
TEAMS_APP_TENANT_ID=your-teams-tenant-id

# Teams Bot Port (default: 3978)
TEAMS_PORT=3978

# =============================================================================
# OPENAI CONFIGURATION
# =============================================================================
# Required for natural language processing of time logging requests
# Get from: https://platform.openai.com/api-keys

OPENAI_API_KEY=your-openai-api-key

# =============================================================================
# ENCRYPTION & SECURITY (CRITICAL FOR MULTI-TENANT)
# =============================================================================
# This key encrypts all user Personal Access Tokens
# Generate with: openssl rand -hex 32
# MUST be 64 hex characters (32 bytes) long

ENCRYPTION_KEY=your-32-character-encryption-key-here

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# Application Port (for health checks and Express server)
PORT=3000

# Node Environment
NODE_ENV=development

# Logging Level (error, warn, info, debug)
LOG_LEVEL=info

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# SQLite Database Path (will be created automatically)
DB_PATH=./data/timelogger.db

# =============================================================================
# JIRA CONFIGURATION (DEPRECATED - NOW PER-USER)
# =============================================================================
# ‚ö†Ô∏è  IMPORTANT: These global Jira settings are NO LONGER USED
# In multi-tenant mode, each user configures their own Jira access
# Users run: /jiraconfig <jira-url> <personal-access-token>

# DEPRECATED: Global Jira Base URL (now per-user via /jiraconfig)
# JIRA_BASE_URL=https://your-domain.atlassian.net

# DEPRECATED: Global Personal Access Token (now per-user via /jiraconfig)
# JIRA_PERSONAL_ACCESS_TOKEN=your-jira-personal-access-token

# DEPRECATED: Basic Auth credentials (now per-user via /jiraconfig)
# JIRA_USERNAME=your-jira-username
# JIRA_PASSWORD=your-jira-password

# SSL Certificate Validation (global setting, affects all users)
# Set to 'false' for enterprise Jira instances with self-signed certificates
JIRA_REJECT_UNAUTHORIZED=true

# =============================================================================
# QUICK SETUP GUIDE
# =============================================================================
#
# 1. COPY THIS FILE:
#    cp env.example .env
#
# 2. GENERATE ENCRYPTION KEY:
#    openssl rand -hex 32
#    # Copy output to ENCRYPTION_KEY above
#
# 3. SLACK APP SETUP:
#    - Go to https://api.slack.com/apps
#    - Create new app "From an app manifest"
#    - Use slack-app-manifest.yml content
#    - Copy tokens to SLACK_* variables above
#    - Install app to workspace
#
# 4. OPENAI SETUP:
#    - Go to https://platform.openai.com/api-keys
#    - Create new API key
#    - Copy to OPENAI_API_KEY above
#
# 5. START THE BOT:
#    npm start
#    # or for development: npm run dev:slack
#
# 6. USER ONBOARDING:
#    - Users run: /jiraconfig https://company.atlassian.net their-token
#    - Each user configures their own secure Jira access
#    - No shared credentials needed!
#
# =============================================================================

# =============================================================================
# MULTI-TENANT FEATURES
# =============================================================================
#
# ‚úÖ Per-user Jira configuration (/jiraconfig command)
# ‚úÖ Encrypted Personal Access Token storage
# ‚úÖ User-specific icon preferences (/iconconfig command)
# ‚úÖ Cross-platform support (Slack + Teams with same data)
# ‚úÖ Natural language time logging
# ‚úÖ Personal ticket management (/mytickets)
# ‚úÖ Individual time reports (/timereport)
# ‚úÖ Secure user isolation
#
# =============================================================================

# =============================================================================
# SECURITY NOTES
# =============================================================================
#
# üîê ENCRYPTION_KEY: Critical for security - never share or commit
# üîí User PATs: Encrypted per-user with AES-256-CBC
# üë• User Isolation: Each user only sees their own data
# üîÑ Cross-Platform: Same encrypted config works on Slack & Teams
# üóëÔ∏è  Easy Cleanup: Users can remove config anytime
#
# For production deployment:
# - Use environment-specific encryption keys
# - Consider Azure Key Vault or AWS Secrets Manager
# - Monitor logs for failed authentication attempts
# - Regular security audits of user configurations
#
# ============================================================================= 